diff --git a/third_party/intel/backend/compiler.py b/third_party/intel/backend/compiler.py
index ae57d4d83..8f0ee0301 100644
--- a/third_party/intel/backend/compiler.py
+++ b/third_party/intel/backend/compiler.py
@@ -87,9 +87,7 @@ def min_dot_size(device_props: dict):
     # M: repeatCount. 1,2,4,8
     # N: executionSize. 16 for PVC, 8 for ATS
     # K: systolicDepth x opsPerChan. systolicDepth must be 8
-
-    # default 8 because 1,2,4 is not supported by our backend now.
-    repeat_count = 8
+    repeat_count = 1 
     sdepth = 8
     exec_size = min(device_props["sub_group_sizes"])
 
diff --git a/third_party/intel/lib/TritonIntelGPUTransforms/AccelerateMatmul.cpp b/third_party/intel/lib/TritonIntelGPUTransforms/AccelerateMatmul.cpp
index 4b70cd199..cdadc5150 100644
--- a/third_party/intel/lib/TritonIntelGPUTransforms/AccelerateMatmul.cpp
+++ b/third_party/intel/lib/TritonIntelGPUTransforms/AccelerateMatmul.cpp
@@ -123,9 +123,11 @@ public:
     size_t rank = retShape.size();
     SmallVector<unsigned> repCluster(rank, 1);
 
+    unsigned repeatCount =
+        std::min(dpasCap.repeatCount, (unsigned)retShape[rank - 2] /*M*/);
     unsigned threadsPerWarp = ttg::TritonGPUDialect::getThreadsPerWarp(mod);
     auto dpasEnc = ttgi::DpasEncodingAttr::get(
-        oldRetType.getContext(), dpasCap.repeatCount, dpasCap.systolicDepth,
+        oldRetType.getContext(), repeatCount, dpasCap.systolicDepth,
         dpasCap.executionSize, opsPerChan, warpsPerTile, repCluster,
         threadsPerWarp);
 
@@ -157,7 +159,7 @@ public:
       repCluster[rank - 1] = repClusterDimN;
 
       dpasEnc = ttgi::DpasEncodingAttr::get(
-          oldRetType.getContext(), dpasCap.repeatCount, dpasCap.systolicDepth,
+          oldRetType.getContext(), repeatCount, dpasCap.systolicDepth,
           dpasCap.executionSize, opsPerChan, warpsPerTile, repCluster,
           threadsPerWarp);
     }

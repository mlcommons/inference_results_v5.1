From bfe6b522b4d39b4e0696f6ed3cfd48a38215a6b3 Mon Sep 17 00:00:00 2001
From: MLPerf <mlperf>
Date: Wed, 1 Jan 2025 00:00:00 +0000
Subject: [PATCH] Fix the build issues for moe kernel

---
 ...mm_pipeline_agmem_bgmem_creg_v1_policy.hpp | 202 +++++++++---------
 1 file changed, 101 insertions(+), 101 deletions(-)
 mode change 100644 => 100755 include/ck_tile/ops/flatmm/pipeline/flatmm_pipeline_agmem_bgmem_creg_v1_policy.hpp

diff --git a/include/ck_tile/ops/flatmm/pipeline/flatmm_pipeline_agmem_bgmem_creg_v1_policy.hpp b/include/ck_tile/ops/flatmm/pipeline/flatmm_pipeline_agmem_bgmem_creg_v1_policy.hpp
old mode 100644
new mode 100755
index 474924ec..37ed1017
--- a/include/ck_tile/ops/flatmm/pipeline/flatmm_pipeline_agmem_bgmem_creg_v1_policy.hpp
+++ b/include/ck_tile/ops/flatmm/pipeline/flatmm_pipeline_agmem_bgmem_creg_v1_policy.hpp
@@ -14,107 +14,107 @@ struct UniversalFlatmmPipelineAgBgCrPolicy
     static constexpr auto I1 = number<1>{};
     static constexpr auto I2 = number<2>{};
 
-    // 3d + padding
-    template <typename Problem>
-    CK_TILE_HOST_DEVICE static constexpr auto MakeALdsBlockDescriptor()
-    {
-        using namespace ck_tile;
-#if defined(USING_MFMA_16x16x32) && defined(ENABLE_FP8)
-        /*reduce transform layers,compare with old ck*/
-        constexpr index_t MPerBlock = Problem::BlockGemmShape::kM;
-        constexpr index_t KPerBlock = Problem::BlockGemmShape::kK;
-        constexpr index_t KPack     = GetSmemPackA<Problem>();
-
-        constexpr auto a_lds_block_desc_0 = make_naive_tensor_descriptor(
-            make_tuple(number<KPerBlock / KPack>{}, number<MPerBlock>{}, number<KPack>{}),
-            make_tuple(number<KPack>{}, number<KPerBlock>{}, number<1>{}),
-            number<KPack>{},
-            number<1>{});
-
-        constexpr auto a_lds_block_desc_permuted = transform_tensor_descriptor(
-            a_lds_block_desc_0,
-            make_tuple(
-                make_xor_transform(make_tuple(number<MPerBlock>{}, number<KPerBlock / KPack>{})),
-                make_pass_through_transform(number<KPack>{})),
-            make_tuple(sequence<1, 0>{}, sequence<2>{}),
-            make_tuple(sequence<1, 0>{}, sequence<2>{}));
-
-        constexpr auto a_lds_block_desc = transform_tensor_descriptor(
-            a_lds_block_desc_permuted,
-            make_tuple(make_pass_through_transform(number<MPerBlock>{}),
-                       make_merge_transform_v3_division_mod(
-                           make_tuple(number<KPerBlock / KPack>{}, number<KPack>{}))),
-            make_tuple(sequence<1>{}, sequence<0, 2>{}),
-            make_tuple(sequence<0>{}, sequence<1>{}));
-
-        return a_lds_block_desc;
-#elif defined(USING_MFMA_32x32x16)
-        constexpr index_t kMPerBlock = Problem::BlockGemmShape::kM;
-        constexpr index_t kKPerBlock = Problem::BlockGemmShape::kK;
-        constexpr index_t kKPack     = GetSmemPackA<Problem>();
-
-        constexpr auto a_lds_block_desc_0 = make_naive_tensor_descriptor(
-            make_tuple(number<kKPerBlock / kKPack>{}, number<kMPerBlock>{}, number<kKPack>{}),
-            make_tuple(number<(kMPerBlock + 1) * kKPack>{}, number<kKPack>{}, number<1>{}),
-            number<kKPack>{},
-            number<1>{});
-
-        constexpr auto a_lds_block_desc = transform_tensor_descriptor(
-            a_lds_block_desc_0,
-            make_tuple(make_pass_through_transform(kMPerBlock),
-                       make_merge_transform(make_tuple(kKPerBlock / kKPack, kKPack))),
-            make_tuple(sequence<1>{}, sequence<0, 2>{}),
-            make_tuple(sequence<0>{}, sequence<1>{}));
-
-        return a_lds_block_desc;
-#endif
-/*xor*/
-#if 0
-        constexpr index_t kMPerBlock = Problem::BlockGemmShape::kM;
-        constexpr index_t kKPerBlock = Problem::BlockGemmShape::kK;
-        constexpr index_t kKPack     = GetSmemPackA<Problem>();
-        using ADataType = remove_cvref_t<typename Problem::ADataType>;
-
-        constexpr auto DataTypeSize = sizeof(ADataType);
-        constexpr auto MLdsLayer =
-            (32 * 4 / kKPerBlock / DataTypeSize) < 1 ? 1 : (32 * 4 / kKPerBlock / DataTypeSize);
-
-        constexpr auto a_lds_block_desc_0 = make_naive_tensor_descriptor(
-            make_tuple(number<kKPerBlock / kKPack * MLdsLayer>{},
-                    number<kMPerBlock / MLdsLayer>{},
-                    number<kKPack>{}),
-            make_tuple(number<kKPack>{}, number<kKPerBlock * MLdsLayer>{}, number<1>{}),
-            number<kKPack>{},
-            number<1>{});
-
-        constexpr auto a_lds_block_desc_permuted = transform_tensor_descriptor(
-            a_lds_block_desc_0,
-            make_tuple(make_xor_transform(make_tuple(number<kMPerBlock / MLdsLayer>{},
-                                                    number<kKPerBlock / kKPack * MLdsLayer>{})),
-                    make_pass_through_transform(number<kKPack>{})),
-            make_tuple(sequence<1, 0>{}, sequence<2>{}),
-            make_tuple(sequence<1, 0>{}, sequence<2>{}));
-
-        constexpr auto a_lds_block_desc_xk0_mnldslayer_mn_xk1 = transform_tensor_descriptor(
-            a_lds_block_desc_permuted,
-            make_tuple(make_unmerge_transform(
-                        make_tuple(number<MLdsLayer>{}, number<kKPerBlock / kKPack>{})),
-                        make_pass_through_transform(number<kMPerBlock / MLdsLayer>{}),
-                        make_pass_through_transform(number<kKPack>{})),
-            make_tuple(sequence<0>{}, sequence<1>{}, sequence<2>{}),
-            make_tuple(sequence<0, 2>{}, sequence<1>{}, sequence<3>{}));
-
-        constexpr auto a_lds_block_desc = transform_tensor_descriptor(
-            a_lds_block_desc_xk0_mnldslayer_mn_xk1,
-            make_tuple(make_merge_transform(
-                        make_tuple(number<kMPerBlock / MLdsLayer>{}, number<MLdsLayer>{})),
-                        make_merge_transform(
-                        make_tuple(number<kKPerBlock / kKPack>{}, number<kKPack>{}))),
-            make_tuple(sequence<1, 0>{}, sequence<2, 3>{}),
-            make_tuple(sequence<0>{}, sequence<1>{}));
-#endif
-        return a_lds_block_desc;
-    }
+//     // 3d + padding
+//     template <typename Problem>
+//     CK_TILE_HOST_DEVICE static constexpr auto MakeALdsBlockDescriptor()
+//     {
+//         using namespace ck_tile;
+// #if defined(USING_MFMA_16x16x32) && defined(ENABLE_FP8)
+//         /*reduce transform layers,compare with old ck*/
+//         constexpr index_t MPerBlock = Problem::BlockGemmShape::kM;
+//         constexpr index_t KPerBlock = Problem::BlockGemmShape::kK;
+//         constexpr index_t KPack     = GetSmemPackA<Problem>();
+
+//         constexpr auto a_lds_block_desc_0 = make_naive_tensor_descriptor(
+//             make_tuple(number<KPerBlock / KPack>{}, number<MPerBlock>{}, number<KPack>{}),
+//             make_tuple(number<KPack>{}, number<KPerBlock>{}, number<1>{}),
+//             number<KPack>{},
+//             number<1>{});
+
+//         constexpr auto a_lds_block_desc_permuted = transform_tensor_descriptor(
+//             a_lds_block_desc_0,
+//             make_tuple(
+//                 make_xor_transform(make_tuple(number<MPerBlock>{}, number<KPerBlock / KPack>{})),
+//                 make_pass_through_transform(number<KPack>{})),
+//             make_tuple(sequence<1, 0>{}, sequence<2>{}),
+//             make_tuple(sequence<1, 0>{}, sequence<2>{}));
+
+//         constexpr auto a_lds_block_desc = transform_tensor_descriptor(
+//             a_lds_block_desc_permuted,
+//             make_tuple(make_pass_through_transform(number<MPerBlock>{}),
+//                        make_merge_transform_v3_division_mod(
+//                            make_tuple(number<KPerBlock / KPack>{}, number<KPack>{}))),
+//             make_tuple(sequence<1>{}, sequence<0, 2>{}),
+//             make_tuple(sequence<0>{}, sequence<1>{}));
+
+//         return a_lds_block_desc;
+// #elif defined(USING_MFMA_32x32x16)
+//         constexpr index_t kMPerBlock = Problem::BlockGemmShape::kM;
+//         constexpr index_t kKPerBlock = Problem::BlockGemmShape::kK;
+//         constexpr index_t kKPack     = GetSmemPackA<Problem>();
+
+//         constexpr auto a_lds_block_desc_0 = make_naive_tensor_descriptor(
+//             make_tuple(number<kKPerBlock / kKPack>{}, number<kMPerBlock>{}, number<kKPack>{}),
+//             make_tuple(number<(kMPerBlock + 1) * kKPack>{}, number<kKPack>{}, number<1>{}),
+//             number<kKPack>{},
+//             number<1>{});
+
+//         constexpr auto a_lds_block_desc = transform_tensor_descriptor(
+//             a_lds_block_desc_0,
+//             make_tuple(make_pass_through_transform(kMPerBlock),
+//                        make_merge_transform(make_tuple(kKPerBlock / kKPack, kKPack))),
+//             make_tuple(sequence<1>{}, sequence<0, 2>{}),
+//             make_tuple(sequence<0>{}, sequence<1>{}));
+
+//         return a_lds_block_desc;
+// #endif
+// /*xor*/
+// #if 0
+//         constexpr index_t kMPerBlock = Problem::BlockGemmShape::kM;
+//         constexpr index_t kKPerBlock = Problem::BlockGemmShape::kK;
+//         constexpr index_t kKPack     = GetSmemPackA<Problem>();
+//         using ADataType = remove_cvref_t<typename Problem::ADataType>;
+
+//         constexpr auto DataTypeSize = sizeof(ADataType);
+//         constexpr auto MLdsLayer =
+//             (32 * 4 / kKPerBlock / DataTypeSize) < 1 ? 1 : (32 * 4 / kKPerBlock / DataTypeSize);
+
+//         constexpr auto a_lds_block_desc_0 = make_naive_tensor_descriptor(
+//             make_tuple(number<kKPerBlock / kKPack * MLdsLayer>{},
+//                     number<kMPerBlock / MLdsLayer>{},
+//                     number<kKPack>{}),
+//             make_tuple(number<kKPack>{}, number<kKPerBlock * MLdsLayer>{}, number<1>{}),
+//             number<kKPack>{},
+//             number<1>{});
+
+//         constexpr auto a_lds_block_desc_permuted = transform_tensor_descriptor(
+//             a_lds_block_desc_0,
+//             make_tuple(make_xor_transform(make_tuple(number<kMPerBlock / MLdsLayer>{},
+//                                                     number<kKPerBlock / kKPack * MLdsLayer>{})),
+//                     make_pass_through_transform(number<kKPack>{})),
+//             make_tuple(sequence<1, 0>{}, sequence<2>{}),
+//             make_tuple(sequence<1, 0>{}, sequence<2>{}));
+
+//         constexpr auto a_lds_block_desc_xk0_mnldslayer_mn_xk1 = transform_tensor_descriptor(
+//             a_lds_block_desc_permuted,
+//             make_tuple(make_unmerge_transform(
+//                         make_tuple(number<MLdsLayer>{}, number<kKPerBlock / kKPack>{})),
+//                         make_pass_through_transform(number<kMPerBlock / MLdsLayer>{}),
+//                         make_pass_through_transform(number<kKPack>{})),
+//             make_tuple(sequence<0>{}, sequence<1>{}, sequence<2>{}),
+//             make_tuple(sequence<0, 2>{}, sequence<1>{}, sequence<3>{}));
+
+//         constexpr auto a_lds_block_desc = transform_tensor_descriptor(
+//             a_lds_block_desc_xk0_mnldslayer_mn_xk1,
+//             make_tuple(make_merge_transform(
+//                         make_tuple(number<kMPerBlock / MLdsLayer>{}, number<MLdsLayer>{})),
+//                         make_merge_transform(
+//                         make_tuple(number<kKPerBlock / kKPack>{}, number<kKPack>{}))),
+//             make_tuple(sequence<1, 0>{}, sequence<2, 3>{}),
+//             make_tuple(sequence<0>{}, sequence<1>{}));
+// #endif
+//         return a_lds_block_desc;
+//     }
 
     template <typename Problem>
     CK_TILE_HOST_DEVICE static constexpr index_t GetSmemSizeA()
-- 
2.34.1
